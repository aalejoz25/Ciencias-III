
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 23 17:09:39 COT 2021
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 23 17:09:39 COT 2021
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\014\004\000\002\014" +
    "\003\000\002\015\011\000\002\015\012\000\002\015\007" +
    "\000\002\015\010\000\002\002\011\000\002\002\010\000" +
    "\002\002\011\000\002\006\004\000\002\006\003\000\002" +
    "\006\004\000\002\006\003\000\002\006\004\000\002\006" +
    "\003\000\002\006\004\000\002\006\003\000\002\006\004" +
    "\000\002\006\003\000\002\006\004\000\002\006\003\000" +
    "\002\006\004\000\002\006\003\000\002\006\004\000\002" +
    "\006\003\000\002\007\010\000\002\007\006\000\002\007" +
    "\006\000\002\007\006\000\002\007\005\000\002\007\005" +
    "\000\002\007\007\000\002\007\007\000\002\007\011\000" +
    "\002\007\011\000\002\007\006\000\002\007\006\000\002" +
    "\007\010\000\002\007\010\000\002\007\011\000\002\007" +
    "\011\000\002\007\011\000\002\007\005\000\002\011\011" +
    "\000\002\024\003\000\002\024\003\000\002\021\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\006\000\002\021\007\000\002\021\006\000" +
    "\002\021\007\000\002\021\005\000\002\021\005\000\002" +
    "\012\015\000\002\013\011\000\002\016\013\000\002\020" +
    "\011\000\002\005\011\000\002\003\021\000\002\003\021" +
    "\000\002\004\013\000\002\022\012\000\002\022\011\000" +
    "\002\010\005\000\002\010\004\000\002\010\004\000\002" +
    "\017\010\000\002\017\007\000\002\017\011\000\002\017" +
    "\013\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\012\012\011\017\007\020\004\101\006\001" +
    "\002\000\004\101\u0100\001\002\000\010\017\007\020\004" +
    "\101\006\001\002\000\004\071\372\001\002\000\004\101" +
    "\030\001\002\000\004\002\uffff\001\002\000\004\054\014" +
    "\001\002\000\004\002\013\001\002\000\004\002\001\001" +
    "\002\000\004\105\015\001\002\000\006\053\017\104\016" +
    "\001\002\000\004\105\023\001\002\000\006\012\011\061" +
    "\020\001\002\000\004\102\022\001\002\000\010\017\ufffc" +
    "\020\ufffc\101\ufffc\001\002\000\010\017\ufffb\020\ufffb\101" +
    "\ufffb\001\002\000\004\053\024\001\002\000\006\012\011" +
    "\061\025\001\002\000\004\102\027\001\002\000\010\017" +
    "\ufffe\020\ufffe\101\ufffe\001\002\000\010\017\ufffd\020\ufffd" +
    "\101\ufffd\001\002\000\004\071\031\001\002\000\004\072" +
    "\032\001\002\000\004\075\033\001\002\000\040\015\055" +
    "\016\051\017\045\022\037\024\035\026\054\030\060\031" +
    "\063\032\034\046\061\047\053\063\050\064\056\065\057" +
    "\105\043\001\002\000\004\071\337\001\002\000\004\105" +
    "\335\001\002\000\042\015\ufff0\016\ufff0\017\ufff0\022\ufff0" +
    "\024\ufff0\026\ufff0\030\ufff0\031\ufff0\032\ufff0\046\ufff0\047" +
    "\ufff0\063\ufff0\064\ufff0\065\ufff0\076\ufff0\105\ufff0\001\002" +
    "\000\004\105\327\001\002\000\042\015\055\016\051\017" +
    "\045\022\037\024\035\026\054\030\060\031\063\032\034" +
    "\046\061\047\053\063\050\064\056\065\057\076\326\105" +
    "\043\001\002\000\042\015\ufff6\016\ufff6\017\ufff6\022\ufff6" +
    "\024\ufff6\026\ufff6\030\ufff6\031\ufff6\032\ufff6\046\ufff6\047" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\076\ufff6\105\ufff6\001\002" +
    "\000\042\015\uffea\016\uffea\017\uffea\022\uffea\024\uffea\026" +
    "\uffea\030\uffea\031\uffea\032\uffea\046\uffea\047\uffea\063\uffea" +
    "\064\uffea\065\uffea\076\uffea\105\uffea\001\002\000\004\033" +
    "\323\001\002\000\042\015\ufff4\016\ufff4\017\ufff4\022\ufff4" +
    "\024\ufff4\026\ufff4\030\ufff4\031\ufff4\032\ufff4\046\ufff4\047" +
    "\ufff4\063\ufff4\064\ufff4\065\ufff4\076\ufff4\105\ufff4\001\002" +
    "\000\006\067\303\105\304\001\002\000\042\015\uffe8\016" +
    "\uffe8\017\uffe8\022\uffe8\024\uffe8\026\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\046\uffe8\047\uffe8\063\uffe8\064\uffe8\065\uffe8\076" +
    "\uffe8\105\uffe8\001\002\000\042\015\ufff2\016\ufff2\017\ufff2" +
    "\022\ufff2\024\ufff2\026\ufff2\030\ufff2\031\ufff2\032\ufff2\046" +
    "\ufff2\047\ufff2\063\ufff2\064\ufff2\065\ufff2\076\ufff2\105\ufff2" +
    "\001\002\000\004\074\300\001\002\000\004\105\261\001" +
    "\002\000\042\015\uffee\016\uffee\017\uffee\022\uffee\024\uffee" +
    "\026\uffee\030\uffee\031\uffee\032\uffee\046\uffee\047\uffee\063" +
    "\uffee\064\uffee\065\uffee\076\uffee\105\uffee\001\002\000\004" +
    "\071\253\001\002\000\004\071\241\001\002\000\004\105" +
    "\237\001\002\000\004\073\230\001\002\000\004\071\171" +
    "\001\002\000\004\075\161\001\002\000\004\071\140\001" +
    "\002\000\042\015\uffec\016\uffec\017\uffec\022\uffec\024\uffec" +
    "\026\uffec\030\uffec\031\uffec\032\uffec\046\uffec\047\uffec\063" +
    "\uffec\064\uffec\065\uffec\076\uffec\105\uffec\001\002\000\004" +
    "\071\064\001\002\000\010\051\067\052\065\105\071\001" +
    "\002\000\006\072\uffd3\102\uffd3\001\002\000\004\072\124" +
    "\001\002\000\006\072\uffd4\102\uffd4\001\002\000\006\072" +
    "\uffd2\102\uffd2\001\002\000\016\053\075\054\073\055\072" +
    "\056\074\057\076\060\077\001\002\000\012\014\117\051" +
    "\067\052\065\106\116\001\002\000\006\105\115\106\114" +
    "\001\002\000\012\014\107\051\067\052\065\106\106\001" +
    "\002\000\006\105\105\106\104\001\002\000\006\105\103" +
    "\106\102\001\002\000\006\105\101\106\100\001\002\000" +
    "\006\072\uffc9\102\uffc9\001\002\000\006\072\uffc8\102\uffc8" +
    "\001\002\000\006\072\uffcb\102\uffcb\001\002\000\006\072" +
    "\uffca\102\uffca\001\002\000\006\072\uffd0\102\uffd0\001\002" +
    "\000\006\072\uffcf\102\uffcf\001\002\000\006\072\uffc2\102" +
    "\uffc2\001\002\000\006\014\111\105\112\001\002\000\006" +
    "\072\uffce\102\uffce\001\002\000\006\072\uffc5\102\uffc5\001" +
    "\002\000\004\014\113\001\002\000\006\072\uffc4\102\uffc4" +
    "\001\002\000\006\072\uffcd\102\uffcd\001\002\000\006\072" +
    "\uffcc\102\uffcc\001\002\000\006\072\uffc3\102\uffc3\001\002" +
    "\000\006\014\121\105\122\001\002\000\006\072\uffd1\102" +
    "\uffd1\001\002\000\006\072\uffc7\102\uffc7\001\002\000\004" +
    "\014\123\001\002\000\006\072\uffc6\102\uffc6\001\002\000" +
    "\004\075\125\001\002\000\040\015\055\016\051\017\045" +
    "\022\037\024\035\026\054\030\060\031\063\032\034\046" +
    "\061\047\053\063\050\064\056\065\057\105\043\001\002" +
    "\000\042\015\055\016\051\017\045\022\037\024\035\026" +
    "\054\030\060\031\063\032\034\046\061\047\053\063\050" +
    "\064\056\065\057\076\133\105\043\001\002\000\042\015" +
    "\ufff1\016\ufff1\017\ufff1\022\ufff1\024\ufff1\026\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\046\ufff1\047\ufff1\063\ufff1\064\ufff1\065" +
    "\ufff1\076\ufff1\105\ufff1\001\002\000\042\015\ufff7\016\ufff7" +
    "\017\ufff7\022\ufff7\024\ufff7\026\ufff7\030\ufff7\031\ufff7\032" +
    "\ufff7\046\ufff7\047\ufff7\063\ufff7\064\ufff7\065\ufff7\076\ufff7" +
    "\105\ufff7\001\002\000\042\015\uffeb\016\uffeb\017\uffeb\022" +
    "\uffeb\024\uffeb\026\uffeb\030\uffeb\031\uffeb\032\uffeb\046\uffeb" +
    "\047\uffeb\063\uffeb\064\uffeb\065\uffeb\076\uffeb\105\uffeb\001" +
    "\002\000\042\015\ufff5\016\ufff5\017\ufff5\022\ufff5\024\ufff5" +
    "\026\ufff5\030\ufff5\031\ufff5\032\ufff5\046\ufff5\047\ufff5\063" +
    "\ufff5\064\ufff5\065\ufff5\076\ufff5\105\ufff5\001\002\000\042" +
    "\015\uffc0\016\uffc0\017\uffc0\022\uffc0\024\uffc0\026\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\046\uffc0\047\uffc0\063\uffc0\064\uffc0" +
    "\065\uffc0\076\uffc0\105\uffc0\001\002\000\042\015\uffe9\016" +
    "\uffe9\017\uffe9\022\uffe9\024\uffe9\026\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\046\uffe9\047\uffe9\063\uffe9\064\uffe9\065\uffe9\076" +
    "\uffe9\105\uffe9\001\002\000\042\015\ufff3\016\ufff3\017\ufff3" +
    "\022\ufff3\024\ufff3\026\ufff3\030\ufff3\031\ufff3\032\ufff3\046" +
    "\ufff3\047\ufff3\063\ufff3\064\ufff3\065\ufff3\076\ufff3\105\ufff3" +
    "\001\002\000\042\015\uffef\016\uffef\017\uffef\022\uffef\024" +
    "\uffef\026\uffef\030\uffef\031\uffef\032\uffef\046\uffef\047\uffef" +
    "\063\uffef\064\uffef\065\uffef\076\uffef\105\uffef\001\002\000" +
    "\042\015\uffed\016\uffed\017\uffed\022\uffed\024\uffed\026\uffed" +
    "\030\uffed\031\uffed\032\uffed\046\uffed\047\uffed\063\uffed\064" +
    "\uffed\065\uffed\076\uffed\105\uffed\001\002\000\006\014\141" +
    "\105\143\001\002\000\006\014\146\105\143\001\002\000" +
    "\004\072\144\001\002\000\006\014\uffb0\072\uffb0\001\002" +
    "\000\004\102\145\001\002\000\042\015\uffb3\016\uffb3\017" +
    "\uffb3\022\uffb3\024\uffb3\026\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\046\uffb3\047\uffb3\063\uffb3\064\uffb3\065\uffb3\076\uffb3\105" +
    "\uffb3\001\002\000\004\072\157\001\002\000\004\014\150" +
    "\001\002\000\006\072\151\103\152\001\002\000\004\102" +
    "\156\001\002\000\004\105\153\001\002\000\004\072\154" +
    "\001\002\000\004\102\155\001\002\000\042\015\uffb1\016" +
    "\uffb1\017\uffb1\022\uffb1\024\uffb1\026\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\046\uffb1\047\uffb1\063\uffb1\064\uffb1\065\uffb1\076" +
    "\uffb1\105\uffb1\001\002\000\042\015\uffb2\016\uffb2\017\uffb2" +
    "\022\uffb2\024\uffb2\026\uffb2\030\uffb2\031\uffb2\032\uffb2\046" +
    "\uffb2\047\uffb2\063\uffb2\064\uffb2\065\uffb2\076\uffb2\105\uffb2" +
    "\001\002\000\004\102\160\001\002\000\042\015\uffb4\016" +
    "\uffb4\017\uffb4\022\uffb4\024\uffb4\026\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\046\uffb4\047\uffb4\063\uffb4\064\uffb4\065\uffb4\076" +
    "\uffb4\105\uffb4\001\002\000\040\015\055\016\051\017\045" +
    "\022\037\024\035\026\054\030\060\031\063\032\034\046" +
    "\061\047\053\063\050\064\056\065\057\105\043\001\002" +
    "\000\042\015\055\016\051\017\045\022\037\024\035\026" +
    "\054\030\060\031\063\032\034\046\061\047\053\063\050" +
    "\064\056\065\057\076\163\105\043\001\002\000\004\031" +
    "\164\001\002\000\004\071\165\001\002\000\010\051\067" +
    "\052\065\105\071\001\002\000\004\072\167\001\002\000" +
    "\004\102\170\001\002\000\042\015\uffbf\016\uffbf\017\uffbf" +
    "\022\uffbf\024\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\046" +
    "\uffbf\047\uffbf\063\uffbf\064\uffbf\065\uffbf\076\uffbf\105\uffbf" +
    "\001\002\000\004\105\172\001\002\000\004\072\173\001" +
    "\002\000\004\075\174\001\002\000\004\066\175\001\002" +
    "\000\004\112\200\001\002\000\004\076\177\001\002\000" +
    "\042\015\uffbd\016\uffbd\017\uffbd\022\uffbd\024\uffbd\026\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\046\uffbd\047\uffbd\063\uffbd\064" +
    "\uffbd\065\uffbd\076\uffbd\105\uffbd\001\002\000\004\105\201" +
    "\001\002\000\004\112\202\001\002\000\004\111\203\001" +
    "\002\000\004\046\204\001\002\000\004\071\205\001\002" +
    "\000\004\014\206\001\002\000\004\105\143\001\002\000" +
    "\004\014\210\001\002\000\004\072\211\001\002\000\004" +
    "\102\212\001\002\000\004\107\213\001\002\000\004\102" +
    "\214\001\002\000\006\066\175\110\216\001\002\000\004" +
    "\076\uffbb\001\002\000\004\111\220\001\002\000\004\076" +
    "\uffbc\001\002\000\004\046\221\001\002\000\004\071\222" +
    "\001\002\000\004\014\223\001\002\000\004\105\143\001" +
    "\002\000\004\014\225\001\002\000\004\072\226\001\002" +
    "\000\004\102\227\001\002\000\004\076\uffba\001\002\000" +
    "\006\014\231\105\232\001\002\000\004\105\234\001\002" +
    "\000\004\102\233\001\002\000\042\015\uffe6\016\uffe6\017" +
    "\uffe6\022\uffe6\024\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\046\uffe6\047\uffe6\063\uffe6\064\uffe6\065\uffe6\076\uffe6\105" +
    "\uffe6\001\002\000\004\014\235\001\002\000\004\102\236" +
    "\001\002\000\042\015\uffe7\016\uffe7\017\uffe7\022\uffe7\024" +
    "\uffe7\026\uffe7\030\uffe7\031\uffe7\032\uffe7\046\uffe7\047\uffe7" +
    "\063\uffe7\064\uffe7\065\uffe7\076\uffe7\105\uffe7\001\002\000" +
    "\004\102\240\001\002\000\042\015\uffd6\016\uffd6\017\uffd6" +
    "\022\uffd6\024\uffd6\026\uffd6\030\uffd6\031\uffd6\032\uffd6\046" +
    "\uffd6\047\uffd6\063\uffd6\064\uffd6\065\uffd6\076\uffd6\105\uffd6" +
    "\001\002\000\010\051\067\052\065\105\071\001\002\000" +
    "\004\072\243\001\002\000\004\075\244\001\002\000\040" +
    "\015\055\016\051\017\045\022\037\024\035\026\054\030" +
    "\060\031\063\032\034\046\061\047\053\063\050\064\056" +
    "\065\057\105\043\001\002\000\042\015\055\016\051\017" +
    "\045\022\037\024\035\026\054\030\060\031\063\032\034" +
    "\046\061\047\053\063\050\064\056\065\057\076\246\105" +
    "\043\001\002\000\044\015\uffd5\016\uffd5\017\uffd5\022\uffd5" +
    "\024\uffd5\026\uffd5\027\247\030\uffd5\031\uffd5\032\uffd5\046" +
    "\uffd5\047\uffd5\063\uffd5\064\uffd5\065\uffd5\076\uffd5\105\uffd5" +
    "\001\002\000\004\075\250\001\002\000\040\015\055\016" +
    "\051\017\045\022\037\024\035\026\054\030\060\031\063" +
    "\032\034\046\061\047\053\063\050\064\056\065\057\105" +
    "\043\001\002\000\042\015\055\016\051\017\045\022\037" +
    "\024\035\026\054\030\060\031\063\032\034\046\061\047" +
    "\053\063\050\064\056\065\057\076\252\105\043\001\002" +
    "\000\042\015\uffc1\016\uffc1\017\uffc1\022\uffc1\024\uffc1\026" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\046\uffc1\047\uffc1\063\uffc1" +
    "\064\uffc1\065\uffc1\076\uffc1\105\uffc1\001\002\000\004\014" +
    "\254\001\002\000\004\013\255\001\002\000\004\014\256" +
    "\001\002\000\004\072\257\001\002\000\004\102\260\001" +
    "\002\000\042\015\uffd7\016\uffd7\017\uffd7\022\uffd7\024\uffd7" +
    "\026\uffd7\030\uffd7\031\uffd7\032\uffd7\046\uffd7\047\uffd7\063" +
    "\uffd7\064\uffd7\065\uffd7\076\uffd7\105\uffd7\001\002\000\006" +
    "\033\263\050\262\001\002\000\004\014\272\001\002\000" +
    "\004\014\264\001\002\000\006\014\265\105\266\001\002" +
    "\000\004\102\271\001\002\000\004\014\267\001\002\000" +
    "\004\102\270\001\002\000\042\015\uffd8\016\uffd8\017\uffd8" +
    "\022\uffd8\024\uffd8\026\uffd8\030\uffd8\031\uffd8\032\uffd8\046" +
    "\uffd8\047\uffd8\063\uffd8\064\uffd8\065\uffd8\076\uffd8\105\uffd8" +
    "\001\002\000\042\015\uffda\016\uffda\017\uffda\022\uffda\024" +
    "\uffda\026\uffda\030\uffda\031\uffda\032\uffda\046\uffda\047\uffda" +
    "\063\uffda\064\uffda\065\uffda\076\uffda\105\uffda\001\002\000" +
    "\006\014\273\105\274\001\002\000\004\102\277\001\002" +
    "\000\004\014\275\001\002\000\004\102\276\001\002\000" +
    "\042\015\uffd9\016\uffd9\017\uffd9\022\uffd9\024\uffd9\026\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\046\uffd9\047\uffd9\063\uffd9\064" +
    "\uffd9\065\uffd9\076\uffd9\105\uffd9\001\002\000\042\015\uffdb" +
    "\016\uffdb\017\uffdb\022\uffdb\024\uffdb\026\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\046\uffdb\047\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\076\uffdb\105\uffdb\001\002\000\004\105\301\001\002\000" +
    "\004\102\302\001\002\000\042\015\uffe5\016\uffe5\017\uffe5" +
    "\022\uffe5\024\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\046" +
    "\uffe5\047\uffe5\063\uffe5\064\uffe5\065\uffe5\076\uffe5\105\uffe5" +
    "\001\002\000\004\105\321\001\002\000\012\033\310\050" +
    "\305\067\307\102\306\001\002\000\004\106\314\001\002" +
    "\000\042\015\uffe2\016\uffe2\017\uffe2\022\uffe2\024\uffe2\026" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\046\uffe2\047\uffe2\063\uffe2" +
    "\064\uffe2\065\uffe2\076\uffe2\105\uffe2\001\002\000\004\102" +
    "\313\001\002\000\004\106\311\001\002\000\004\102\312" +
    "\001\002\000\042\015\uffe1\016\uffe1\017\uffe1\022\uffe1\024" +
    "\uffe1\026\uffe1\030\uffe1\031\uffe1\032\uffe1\046\uffe1\047\uffe1" +
    "\063\uffe1\064\uffe1\065\uffe1\076\uffe1\105\uffe1\001\002\000" +
    "\042\015\uffdd\016\uffdd\017\uffdd\022\uffdd\024\uffdd\026\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\046\uffdd\047\uffdd\063\uffdd\064" +
    "\uffdd\065\uffdd\076\uffdd\105\uffdd\001\002\000\006\102\315" +
    "\104\316\001\002\000\042\015\uffe0\016\uffe0\017\uffe0\022" +
    "\uffe0\024\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\046\uffe0" +
    "\047\uffe0\063\uffe0\064\uffe0\065\uffe0\076\uffe0\105\uffe0\001" +
    "\002\000\004\106\317\001\002\000\004\102\320\001\002" +
    "\000\042\015\uffdf\016\uffdf\017\uffdf\022\uffdf\024\uffdf\026" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\046\uffdf\047\uffdf\063\uffdf" +
    "\064\uffdf\065\uffdf\076\uffdf\105\uffdf\001\002\000\004\102" +
    "\322\001\002\000\042\015\uffdc\016\uffdc\017\uffdc\022\uffdc" +
    "\024\uffdc\026\uffdc\030\uffdc\031\uffdc\032\uffdc\046\uffdc\047" +
    "\uffdc\063\uffdc\064\uffdc\065\uffdc\076\uffdc\105\uffdc\001\002" +
    "\000\004\106\324\001\002\000\004\102\325\001\002\000" +
    "\042\015\uffe4\016\uffe4\017\uffe4\022\uffe4\024\uffe4\026\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\046\uffe4\047\uffe4\063\uffe4\064" +
    "\uffe4\065\uffe4\076\uffe4\105\uffe4\001\002\000\004\002\ufffa" +
    "\001\002\000\004\033\330\001\002\000\004\106\331\001" +
    "\002\000\004\104\332\001\002\000\004\106\333\001\002" +
    "\000\004\102\334\001\002\000\042\015\uffde\016\uffde\017" +
    "\uffde\022\uffde\024\uffde\026\uffde\030\uffde\031\uffde\032\uffde" +
    "\046\uffde\047\uffde\063\uffde\064\uffde\065\uffde\076\uffde\105" +
    "\uffde\001\002\000\004\102\336\001\002\000\042\015\uffe3" +
    "\016\uffe3\017\uffe3\022\uffe3\024\uffe3\026\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\046\uffe3\047\uffe3\063\uffe3\064\uffe3\065\uffe3" +
    "\076\uffe3\105\uffe3\001\002\000\006\017\342\105\341\001" +
    "\002\000\004\072\366\001\002\000\004\033\360\001\002" +
    "\000\004\105\343\001\002\000\004\033\344\001\002\000" +
    "\004\106\345\001\002\000\004\102\346\001\002\000\010" +
    "\051\067\052\065\105\071\001\002\000\004\102\350\001" +
    "\002\000\006\067\352\105\353\001\002\000\004\072\uffb9" +
    "\001\002\000\004\105\357\001\002\000\006\050\354\067" +
    "\355\001\002\000\004\106\356\001\002\000\004\072\uffb6" +
    "\001\002\000\004\072\uffb7\001\002\000\004\072\uffb5\001" +
    "\002\000\004\106\361\001\002\000\004\102\362\001\002" +
    "\000\010\051\067\052\065\105\071\001\002\000\004\102" +
    "\364\001\002\000\006\067\352\105\353\001\002\000\004" +
    "\072\uffb8\001\002\000\004\075\367\001\002\000\040\015" +
    "\055\016\051\017\045\022\037\024\035\026\054\030\060" +
    "\031\063\032\034\046\061\047\053\063\050\064\056\065" +
    "\057\105\043\001\002\000\042\015\055\016\051\017\045" +
    "\022\037\024\035\026\054\030\060\031\063\032\034\046" +
    "\061\047\053\063\050\064\056\065\057\076\371\105\043" +
    "\001\002\000\042\015\uffbe\016\uffbe\017\uffbe\022\uffbe\024" +
    "\uffbe\026\uffbe\030\uffbe\031\uffbe\032\uffbe\046\uffbe\047\uffbe" +
    "\063\uffbe\064\uffbe\065\uffbe\076\uffbe\105\uffbe\001\002\000" +
    "\004\072\373\001\002\000\004\075\374\001\002\000\040" +
    "\015\055\016\051\017\045\022\037\024\035\026\054\030" +
    "\060\031\063\032\034\046\061\047\053\063\050\064\056" +
    "\065\057\105\043\001\002\000\042\015\055\016\051\017" +
    "\045\022\037\024\035\026\054\030\060\031\063\032\034" +
    "\046\061\047\053\063\050\064\056\065\057\076\376\105" +
    "\043\001\002\000\004\002\ufff9\001\002\000\004\002\000" +
    "\001\002\000\004\071\u0101\001\002\000\004\072\u0102\001" +
    "\002\000\004\075\u0103\001\002\000\040\015\055\016\051" +
    "\017\045\022\037\024\035\026\054\030\060\031\063\032" +
    "\034\046\061\047\053\063\050\064\056\065\057\105\043" +
    "\001\002\000\042\015\055\016\051\017\045\022\037\024" +
    "\035\026\054\030\060\031\063\032\034\046\061\047\053" +
    "\063\050\064\056\065\057\076\u0105\105\043\001\002\000" +
    "\004\002\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\010\002\007\014\011\015\004\001\001\000" +
    "\002\001\001\000\004\002\376\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\041\006\037\007" +
    "\040\011\043\012\046\013\035\016\051\017\045\020\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\130\007\127\011\131" +
    "\012\134\013\126\016\135\017\133\020\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\065\024\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\117\001\001\000\002\001\001\000\004\024\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\041\006\125" +
    "\007\040\011\043\012\046\013\035\016\051\017\045\020" +
    "\061\001\001\000\022\005\130\007\127\011\131\012\134" +
    "\013\126\016\135\017\133\020\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\141\001\001" +
    "\000\004\023\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\041\006\161\007\040\011\043\012\046" +
    "\013\035\016\051\017\045\020\061\001\001\000\022\005" +
    "\130\007\127\011\131\012\134\013\126\016\135\017\133" +
    "\020\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\165\024\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\216\004" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\241\024\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\005" +
    "\041\006\244\007\040\011\043\012\046\013\035\016\051" +
    "\017\045\020\061\001\001\000\022\005\130\007\127\011" +
    "\131\012\134\013\126\016\135\017\133\020\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\041\006" +
    "\250\007\040\011\043\012\046\013\035\016\051\017\045" +
    "\020\061\001\001\000\022\005\130\007\127\011\131\012" +
    "\134\013\126\016\135\017\133\020\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\337\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\346\024\067\001" +
    "\001\000\002\001\001\000\004\010\350\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\362\024" +
    "\067\001\001\000\002\001\001\000\004\010\364\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\041\006" +
    "\367\007\040\011\043\012\046\013\035\016\051\017\045" +
    "\020\061\001\001\000\022\005\130\007\127\011\131\012" +
    "\134\013\126\016\135\017\133\020\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\005" +
    "\041\006\374\007\040\011\043\012\046\013\035\016\051" +
    "\017\045\020\061\001\001\000\022\005\130\007\127\011" +
    "\131\012\134\013\126\016\135\017\133\020\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\041\006\u0103" +
    "\007\040\011\043\012\046\013\035\016\051\017\045\020" +
    "\061\001\001\000\022\005\130\007\127\011\131\012\134" +
    "\013\126\016\135\017\133\020\136\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_PRINTF ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PRINTF ::= Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Coma Identificador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PRINTF ::= Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PRINTF ::= Printf Parent_a SENTENCIA_PRINTF Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PRINTF ::= Printf Parent_a Comillas Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DEFAULT ::= Default Dos_puntos Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFAULT",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CASE ::= Case Comilla_Simple Identificador Comilla_Simple Dos_puntos Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Parent_c P_coma Break P_coma DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-14)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CASE ::= Case Comilla_Simple Identificador Comilla_Simple Dos_puntos Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Parent_c P_coma Break P_coma CASE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-14)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_BOOLEANA ::= Identificador Diferente Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_BOOLEANA ::= Identificador Igual_a Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_BOOLEANA ::= Identificador Diferente Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOLEANA ::= Identificador Diferente Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_BOOLEANA ::= Identificador Igual_a Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_BOOLEANA ::= Identificador Igual_a Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_BOOLEANA ::= Identificador Menor_Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOLEANA ::= Identificador Menor_Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA ::= Identificador Mayor_Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_BOOLEANA ::= Identificador Mayor_Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_BOOLEANA ::= Identificador Menorque Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_BOOLEANA ::= Identificador Menorque Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_BOOLEANA ::= Identificador Diferente OP_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_BOOLEANA ::= Identificador Mayorque Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_BOOLEANA ::= Identificador Mayorque Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_BOOLEANA ::= Identificador Igual_a OP_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= OP_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP_BOOLEANO ::= False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP_BOOLEANO ::= True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Return Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Sistema Parent_a Comillas Pause Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Int Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Cin Desplazamiento_Der Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Cout Desplazamiento_Izq Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Cout Desplazamiento_Izq Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= Void Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INCLUDE ::= Include Menorque Identificador Mayorque Using P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INCLUDE ::= Include Menorque Identificador Mayorque INCLUDE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INCLUDE ::= Include Menorque Identificador Punto Identificador Mayorque Using P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INCLUDE ::= Include Menorque Identificador Punto Identificador Mayorque INCLUDE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= INICIO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PROGRAMA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= INCLUDE INICIO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PROGRAMA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

