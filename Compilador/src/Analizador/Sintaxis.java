
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 11 19:34:52 COT 2021
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 11 19:34:52 COT 2021
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\002\011\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\005\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\004\005" +
    "\000\002\004\007\000\002\004\007\000\002\004\011\000" +
    "\002\004\011\000\002\004\006\000\002\004\006\000\002" +
    "\004\010\000\002\004\010\000\002\004\011\000\002\004" +
    "\011\000\002\006\011\000\002\014\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\006\000" +
    "\002\014\007\000\002\007\015\000\002\010\011\000\002" +
    "\011\013\000\002\013\011\000\002\015\012\000\002\015" +
    "\011\000\002\005\005\000\002\005\004\000\002\005\004" +
    "\000\002\012\010\000\002\012\022\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\010\007\007\010\004\044\005\001\002\000" +
    "\004\044\243\001\002\000\004\036\236\001\002\000\004" +
    "\002\235\001\002\000\004\044\010\001\002\000\004\036" +
    "\011\001\002\000\004\037\012\001\002\000\004\040\013" +
    "\001\002\000\022\006\023\007\027\012\014\016\021\021" +
    "\017\022\031\032\024\050\032\001\002\000\004\050\227" +
    "\001\002\000\026\006\ufff6\007\ufff6\012\ufff6\016\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\032\ufff6\041\ufff6\050\ufff6\001\002" +
    "\000\026\006\ufff1\007\ufff1\012\ufff1\016\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\032\ufff1\041\ufff1\050\ufff1\001\002\000\004" +
    "\036\221\001\002\000\026\006\ufff3\007\ufff3\012\ufff3\016" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\032\ufff3\041\ufff3\050\ufff3" +
    "\001\002\000\004\036\207\001\002\000\026\006\ufffc\007" +
    "\ufffc\012\ufffc\016\ufffc\020\ufffc\021\ufffc\022\ufffc\032\ufffc" +
    "\041\ufffc\050\ufffc\001\002\000\004\050\170\001\002\000" +
    "\004\036\145\001\002\000\026\006\ufff8\007\ufff8\012\ufff8" +
    "\016\ufff8\020\ufff8\021\ufff8\022\ufff8\032\ufff8\041\ufff8\050" +
    "\ufff8\001\002\000\026\006\ufffa\007\ufffa\012\ufffa\016\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\032\ufffa\041\ufffa\050\ufffa\001" +
    "\002\000\006\034\126\050\125\001\002\000\026\006\023" +
    "\007\027\012\014\016\021\020\107\021\017\022\031\032" +
    "\024\041\124\050\032\001\002\000\004\036\036\001\002" +
    "\000\004\023\033\001\002\000\004\051\034\001\002\000" +
    "\004\045\035\001\002\000\026\006\ufff0\007\ufff0\012\ufff0" +
    "\016\ufff0\020\ufff0\021\ufff0\022\ufff0\032\ufff0\041\ufff0\050" +
    "\ufff0\001\002\000\006\007\041\050\040\001\002\000\004" +
    "\037\077\001\002\000\004\023\071\001\002\000\004\050" +
    "\042\001\002\000\004\023\043\001\002\000\004\051\044" +
    "\001\002\000\004\045\045\001\002\000\006\035\047\050" +
    "\050\001\002\000\004\045\061\001\002\000\006\037\uffe3" +
    "\045\uffe3\001\002\000\004\031\051\001\002\000\012\005" +
    "\053\035\054\050\055\051\052\001\002\000\006\037\uffe1" +
    "\045\uffe1\001\002\000\006\005\056\050\057\001\002\000" +
    "\006\037\uffe2\045\uffe2\001\002\000\006\037\uffe0\045\uffe0" +
    "\001\002\000\006\037\uffdf\045\uffdf\001\002\000\004\005" +
    "\060\001\002\000\006\037\uffde\045\uffde\001\002\000\006" +
    "\034\063\050\064\001\002\000\004\037\uffd9\001\002\000" +
    "\004\050\070\001\002\000\006\033\065\034\066\001\002" +
    "\000\004\051\067\001\002\000\004\037\uffd6\001\002\000" +
    "\004\037\uffd7\001\002\000\004\037\uffd5\001\002\000\004" +
    "\051\072\001\002\000\004\045\073\001\002\000\006\035" +
    "\047\050\050\001\002\000\004\045\075\001\002\000\006" +
    "\034\063\050\064\001\002\000\004\037\uffd8\001\002\000" +
    "\004\040\100\001\002\000\022\006\023\007\027\012\014" +
    "\016\021\021\017\022\031\032\024\050\032\001\002\000" +
    "\026\006\023\007\027\012\014\016\021\020\107\021\017" +
    "\022\031\032\024\041\111\050\032\001\002\000\026\006" +
    "\ufff7\007\ufff7\012\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7" +
    "\032\ufff7\041\ufff7\050\ufff7\001\002\000\026\006\ufff2\007" +
    "\ufff2\012\ufff2\016\ufff2\020\ufff2\021\ufff2\022\ufff2\032\ufff2" +
    "\041\ufff2\050\ufff2\001\002\000\026\006\ufff4\007\ufff4\012" +
    "\ufff4\016\ufff4\020\ufff4\021\ufff4\022\ufff4\032\ufff4\041\ufff4" +
    "\050\ufff4\001\002\000\026\006\ufffd\007\ufffd\012\ufffd\016" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\032\ufffd\041\ufffd\050\ufffd" +
    "\001\002\000\026\006\ufff9\007\ufff9\012\ufff9\016\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\032\ufff9\041\ufff9\050\ufff9\001\002" +
    "\000\004\040\114\001\002\000\026\006\ufffb\007\ufffb\012" +
    "\ufffb\016\ufffb\020\ufffb\021\ufffb\022\ufffb\032\ufffb\041\ufffb" +
    "\050\ufffb\001\002\000\026\006\uffda\007\uffda\012\uffda\016" +
    "\uffda\020\uffda\021\uffda\022\uffda\032\uffda\041\uffda\050\uffda" +
    "\001\002\000\004\020\107\001\002\000\026\006\ufff5\007" +
    "\ufff5\012\ufff5\016\ufff5\020\ufff5\021\ufff5\022\ufff5\032\ufff5" +
    "\041\ufff5\050\ufff5\001\002\000\022\006\023\007\027\012" +
    "\014\016\021\021\017\022\031\032\024\050\032\001\002" +
    "\000\026\006\023\007\027\012\014\016\021\020\107\021" +
    "\017\022\031\032\024\041\116\050\032\001\002\000\004" +
    "\021\117\001\002\000\004\036\120\001\002\000\006\035" +
    "\047\050\050\001\002\000\004\037\122\001\002\000\004" +
    "\045\123\001\002\000\026\006\uffdb\007\uffdb\012\uffdb\016" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\032\uffdb\041\uffdb\050\uffdb" +
    "\001\002\000\004\002\000\001\002\000\012\023\134\033" +
    "\131\034\133\045\132\001\002\000\004\050\127\001\002" +
    "\000\004\045\130\001\002\000\026\006\uffe9\007\uffe9\012" +
    "\uffe9\016\uffe9\020\uffe9\021\uffe9\022\uffe9\032\uffe9\041\uffe9" +
    "\050\uffe9\001\002\000\004\051\140\001\002\000\026\006" +
    "\uffef\007\uffef\012\uffef\016\uffef\020\uffef\021\uffef\022\uffef" +
    "\032\uffef\041\uffef\050\uffef\001\002\000\004\045\137\001" +
    "\002\000\004\051\135\001\002\000\004\045\136\001\002" +
    "\000\026\006\uffee\007\uffee\012\uffee\016\uffee\020\uffee\021" +
    "\uffee\022\uffee\032\uffee\041\uffee\050\uffee\001\002\000\026" +
    "\006\uffea\007\uffea\012\uffea\016\uffea\020\uffea\021\uffea\022" +
    "\uffea\032\uffea\041\uffea\050\uffea\001\002\000\006\045\141" +
    "\047\142\001\002\000\026\006\uffed\007\uffed\012\uffed\016" +
    "\uffed\020\uffed\021\uffed\022\uffed\032\uffed\041\uffed\050\uffed" +
    "\001\002\000\004\051\143\001\002\000\004\045\144\001" +
    "\002\000\026\006\uffec\007\uffec\012\uffec\016\uffec\020\uffec" +
    "\021\uffec\022\uffec\032\uffec\041\uffec\050\uffec\001\002\000" +
    "\004\005\146\001\002\000\006\005\147\050\151\001\002" +
    "\000\004\037\166\001\002\000\004\005\152\001\002\000" +
    "\004\005\uffd2\001\002\000\004\037\153\001\002\000\004" +
    "\045\154\001\002\000\004\032\155\001\002\000\004\036" +
    "\156\001\002\000\004\005\157\001\002\000\004\050\151" +
    "\001\002\000\004\005\161\001\002\000\004\046\162\001" +
    "\002\000\004\050\163\001\002\000\004\037\164\001\002" +
    "\000\004\045\165\001\002\000\026\006\uffd3\007\uffd3\012" +
    "\uffd3\016\uffd3\020\uffd3\021\uffd3\022\uffd3\032\uffd3\041\uffd3" +
    "\050\uffd3\001\002\000\004\045\167\001\002\000\026\006" +
    "\uffd4\007\uffd4\012\uffd4\016\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\032\uffd4\041\uffd4\050\uffd4\001\002\000\006\023\172\033" +
    "\171\001\002\000\004\005\201\001\002\000\004\005\173" +
    "\001\002\000\006\005\174\050\175\001\002\000\004\045" +
    "\200\001\002\000\004\005\176\001\002\000\004\045\177" +
    "\001\002\000\026\006\uffe5\007\uffe5\012\uffe5\016\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\032\uffe5\041\uffe5\050\uffe5\001\002" +
    "\000\026\006\uffe7\007\uffe7\012\uffe7\016\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\032\uffe7\041\uffe7\050\uffe7\001\002\000\006" +
    "\005\202\050\203\001\002\000\004\045\206\001\002\000" +
    "\004\005\204\001\002\000\004\045\205\001\002\000\026" +
    "\006\uffe6\007\uffe6\012\uffe6\016\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\032\uffe6\041\uffe6\050\uffe6\001\002\000\026\006\uffe8" +
    "\007\uffe8\012\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8\032" +
    "\uffe8\041\uffe8\050\uffe8\001\002\000\006\035\047\050\050" +
    "\001\002\000\004\037\211\001\002\000\004\040\212\001" +
    "\002\000\022\006\023\007\027\012\014\016\021\021\017" +
    "\022\031\032\024\050\032\001\002\000\026\006\023\007" +
    "\027\012\014\016\021\020\107\021\017\022\031\032\024" +
    "\041\214\050\032\001\002\000\030\006\uffe4\007\uffe4\012" +
    "\uffe4\016\uffe4\017\215\020\uffe4\021\uffe4\022\uffe4\032\uffe4" +
    "\041\uffe4\050\uffe4\001\002\000\004\040\216\001\002\000" +
    "\022\006\023\007\027\012\014\016\021\021\017\022\031" +
    "\032\024\050\032\001\002\000\026\006\023\007\027\012" +
    "\014\016\021\020\107\021\017\022\031\032\024\041\220" +
    "\050\032\001\002\000\026\006\uffdd\007\uffdd\012\uffdd\016" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\032\uffdd\041\uffdd\050\uffdd" +
    "\001\002\000\006\035\047\050\050\001\002\000\004\037" +
    "\223\001\002\000\004\040\224\001\002\000\022\006\023" +
    "\007\027\012\014\016\021\021\017\022\031\032\024\050" +
    "\032\001\002\000\026\006\023\007\027\012\014\016\021" +
    "\020\107\021\017\022\031\032\024\041\226\050\032\001" +
    "\002\000\026\006\uffdc\007\uffdc\012\uffdc\016\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\032\uffdc\041\uffdc\050\uffdc\001\002\000" +
    "\004\023\230\001\002\000\004\051\231\001\002\000\004" +
    "\047\232\001\002\000\004\051\233\001\002\000\004\045" +
    "\234\001\002\000\026\006\uffeb\007\uffeb\012\uffeb\016\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\032\uffeb\041\uffeb\050\uffeb\001" +
    "\002\000\004\002\001\001\002\000\004\037\237\001\002" +
    "\000\004\040\240\001\002\000\022\006\023\007\027\012" +
    "\014\016\021\021\017\022\031\032\024\050\032\001\002" +
    "\000\026\006\023\007\027\012\014\016\021\020\107\021" +
    "\017\022\031\032\024\041\242\050\032\001\002\000\004" +
    "\002\uffff\001\002\000\004\036\244\001\002\000\004\037" +
    "\245\001\002\000\004\040\246\001\002\000\022\006\023" +
    "\007\027\012\014\016\021\021\017\022\031\032\024\050" +
    "\032\001\002\000\026\006\023\007\027\012\014\016\021" +
    "\020\107\021\017\022\031\032\024\041\250\050\032\001" +
    "\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\027\004\021\006\025\007\024\010\014\012\015\013\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\104\006\107\007\105\010\101\011\111\012\102\013" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\073\001\001\000\002\001\001\000" +
    "\004\005\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\100\004\021\006\025\007\024\010\014\012" +
    "\015\013\017\001\001\000\020\004\104\006\107\007\105" +
    "\010\101\011\111\012\102\013\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\112\001\001\000\002\001\001" +
    "\000\020\003\114\004\021\006\025\007\024\010\014\012" +
    "\015\013\017\001\001\000\020\004\104\006\107\007\105" +
    "\010\101\011\111\012\102\013\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\212\004\021\006\025\007\024\010\014\012\015\013" +
    "\017\001\001\000\020\004\104\006\107\007\105\010\101" +
    "\011\111\012\102\013\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\216\004\021\006\025\007\024" +
    "\010\014\012\015\013\017\001\001\000\020\004\104\006" +
    "\107\007\105\010\101\011\111\012\102\013\103\001\001" +
    "\000\002\001\001\000\004\014\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\224\004\021\006\025" +
    "\007\024\010\014\012\015\013\017\001\001\000\020\004" +
    "\104\006\107\007\105\010\101\011\111\012\102\013\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\240\004\021\006\025\007\024" +
    "\010\014\012\015\013\017\001\001\000\020\004\104\006" +
    "\107\007\105\010\101\011\111\012\102\013\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\246\004\021\006\025\007\024" +
    "\010\014\012\015\013\017\001\001\000\020\004\104\006" +
    "\107\007\105\010\101\011\111\012\102\013\103\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_PRINTF ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PRINTF ::= Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Parent_c P_coma Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Coma Identificador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-15)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PRINTF ::= Printf Parent_a Comillas Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Int Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Void Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

