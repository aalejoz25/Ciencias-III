
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 15 19:45:01 COT 2021
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 15 19:45:01 COT 2021
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\002\011\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\005\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\004\005" +
    "\000\002\004\007\000\002\004\007\000\002\004\011\000" +
    "\002\004\011\000\002\004\006\000\002\004\006\000\002" +
    "\004\010\000\002\004\010\000\002\004\011\000\002\004" +
    "\011\000\002\004\011\000\002\004\005\000\002\006\011" +
    "\000\002\014\003\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\006\000\002\014\007\000\002" +
    "\007\015\000\002\010\011\000\002\011\013\000\002\013" +
    "\011\000\002\015\012\000\002\015\011\000\002\005\005" +
    "\000\002\005\004\000\002\005\004\000\002\012\010\000" +
    "\002\012\007\000\002\012\011\000\002\012\013\000\002" +
    "\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\010\017\007\020\004\102\005\001\002\000" +
    "\004\102\253\001\002\000\004\072\246\001\002\000\004" +
    "\002\245\001\002\000\004\102\010\001\002\000\004\072" +
    "\011\001\002\000\004\073\012\001\002\000\004\076\013" +
    "\001\002\000\026\015\017\016\024\017\030\022\014\026" +
    "\021\031\020\032\032\046\025\047\034\106\033\001\002" +
    "\000\004\106\237\001\002\000\032\015\ufff6\016\ufff6\017" +
    "\ufff6\022\ufff6\026\ufff6\030\ufff6\031\ufff6\032\ufff6\046\ufff6" +
    "\047\ufff6\077\ufff6\106\ufff6\001\002\000\032\015\ufff1\016" +
    "\ufff1\017\ufff1\022\ufff1\026\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\046\ufff1\047\ufff1\077\ufff1\106\ufff1\001\002\000\004\106" +
    "\235\001\002\000\004\072\227\001\002\000\004\072\215" +
    "\001\002\000\032\015\ufff3\016\ufff3\017\ufff3\022\ufff3\026" +
    "\ufff3\030\ufff3\031\ufff3\032\ufff3\046\ufff3\047\ufff3\077\ufff3" +
    "\106\ufff3\001\002\000\032\015\ufffc\016\ufffc\017\ufffc\022" +
    "\ufffc\026\ufffc\030\ufffc\031\ufffc\032\ufffc\046\ufffc\047\ufffc" +
    "\077\ufffc\106\ufffc\001\002\000\004\106\176\001\002\000" +
    "\004\072\155\001\002\000\032\015\ufff8\016\ufff8\017\ufff8" +
    "\022\ufff8\026\ufff8\030\ufff8\031\ufff8\032\ufff8\046\ufff8\047" +
    "\ufff8\077\ufff8\106\ufff8\001\002\000\032\015\ufffa\016\ufffa" +
    "\017\ufffa\022\ufffa\026\ufffa\030\ufffa\031\ufffa\032\ufffa\046" +
    "\ufffa\047\ufffa\077\ufffa\106\ufffa\001\002\000\006\067\136" +
    "\106\135\001\002\000\032\015\017\016\024\017\030\022" +
    "\014\026\021\030\121\031\020\032\032\046\025\047\034" +
    "\077\134\106\033\001\002\000\004\072\046\001\002\000" +
    "\004\033\043\001\002\000\004\072\035\001\002\000\004" +
    "\014\036\001\002\000\004\013\037\001\002\000\004\014" +
    "\040\001\002\000\004\073\041\001\002\000\004\103\042" +
    "\001\002\000\032\015\uffe4\016\uffe4\017\uffe4\022\uffe4\026" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\046\uffe4\047\uffe4\077\uffe4" +
    "\106\uffe4\001\002\000\004\107\044\001\002\000\004\103" +
    "\045\001\002\000\032\015\ufff0\016\ufff0\017\ufff0\022\ufff0" +
    "\026\ufff0\030\ufff0\031\ufff0\032\ufff0\046\ufff0\047\ufff0\077" +
    "\ufff0\106\ufff0\001\002\000\006\017\051\106\050\001\002" +
    "\000\004\073\107\001\002\000\004\033\101\001\002\000" +
    "\004\106\052\001\002\000\004\033\053\001\002\000\004" +
    "\107\054\001\002\000\004\103\055\001\002\000\006\071" +
    "\057\106\060\001\002\000\004\103\071\001\002\000\006" +
    "\073\uffe1\103\uffe1\001\002\000\004\045\061\001\002\000" +
    "\012\014\063\071\064\106\065\107\062\001\002\000\006" +
    "\073\uffdf\103\uffdf\001\002\000\006\014\066\106\067\001" +
    "\002\000\006\073\uffe0\103\uffe0\001\002\000\006\073\uffde" +
    "\103\uffde\001\002\000\006\073\uffdd\103\uffdd\001\002\000" +
    "\004\014\070\001\002\000\006\073\uffdc\103\uffdc\001\002" +
    "\000\006\067\074\106\073\001\002\000\004\073\uffd7\001" +
    "\002\000\006\050\076\067\077\001\002\000\004\106\075" +
    "\001\002\000\004\073\uffd3\001\002\000\004\107\100\001" +
    "\002\000\004\073\uffd4\001\002\000\004\073\uffd5\001\002" +
    "\000\004\107\102\001\002\000\004\103\103\001\002\000" +
    "\006\071\057\106\060\001\002\000\004\103\105\001\002" +
    "\000\006\067\074\106\073\001\002\000\004\073\uffd6\001" +
    "\002\000\004\076\110\001\002\000\026\015\017\016\024" +
    "\017\030\022\014\026\021\031\020\032\032\046\025\047" +
    "\034\106\033\001\002\000\032\015\017\016\024\017\030" +
    "\022\014\026\021\030\121\031\020\032\032\046\025\047" +
    "\034\077\115\106\033\001\002\000\032\015\ufff7\016\ufff7" +
    "\017\ufff7\022\ufff7\026\ufff7\030\ufff7\031\ufff7\032\ufff7\046" +
    "\ufff7\047\ufff7\077\ufff7\106\ufff7\001\002\000\032\015\ufffd" +
    "\016\ufffd\017\ufffd\022\ufffd\026\ufffd\030\ufffd\031\ufffd\032" +
    "\ufffd\046\ufffd\047\ufffd\077\ufffd\106\ufffd\001\002\000\032" +
    "\015\ufffb\016\ufffb\017\ufffb\022\ufffb\026\ufffb\030\ufffb\031" +
    "\ufffb\032\ufffb\046\ufffb\047\ufffb\077\ufffb\106\ufffb\001\002" +
    "\000\032\015\uffd8\016\uffd8\017\uffd8\022\uffd8\026\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\046\uffd8\047\uffd8\077\uffd8\106\uffd8" +
    "\001\002\000\032\015\ufff2\016\ufff2\017\ufff2\022\ufff2\026" +
    "\ufff2\030\ufff2\031\ufff2\032\ufff2\046\ufff2\047\ufff2\077\ufff2" +
    "\106\ufff2\001\002\000\032\015\ufff9\016\ufff9\017\ufff9\022" +
    "\ufff9\026\ufff9\030\ufff9\031\ufff9\032\ufff9\046\ufff9\047\ufff9" +
    "\077\ufff9\106\ufff9\001\002\000\004\030\121\001\002\000" +
    "\004\076\123\001\002\000\032\015\ufff4\016\ufff4\017\ufff4" +
    "\022\ufff4\026\ufff4\030\ufff4\031\ufff4\032\ufff4\046\ufff4\047" +
    "\ufff4\077\ufff4\106\ufff4\001\002\000\026\015\017\016\024" +
    "\017\030\022\014\026\021\031\020\032\032\046\025\047" +
    "\034\106\033\001\002\000\032\015\017\016\024\017\030" +
    "\022\014\026\021\030\121\031\020\032\032\046\025\047" +
    "\034\077\125\106\033\001\002\000\004\031\126\001\002" +
    "\000\004\072\127\001\002\000\006\071\057\106\060\001" +
    "\002\000\004\073\131\001\002\000\004\103\132\001\002" +
    "\000\032\015\uffd9\016\uffd9\017\uffd9\022\uffd9\026\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\046\uffd9\047\uffd9\077\uffd9\106\uffd9" +
    "\001\002\000\032\015\ufff5\016\ufff5\017\ufff5\022\ufff5\026" +
    "\ufff5\030\ufff5\031\ufff5\032\ufff5\046\ufff5\047\ufff5\077\ufff5" +
    "\106\ufff5\001\002\000\004\002\000\001\002\000\012\033" +
    "\144\050\141\067\143\103\142\001\002\000\004\106\137" +
    "\001\002\000\004\103\140\001\002\000\032\015\uffe9\016" +
    "\uffe9\017\uffe9\022\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\046\uffe9\047\uffe9\077\uffe9\106\uffe9\001\002\000\004\107" +
    "\150\001\002\000\032\015\uffef\016\uffef\017\uffef\022\uffef" +
    "\026\uffef\030\uffef\031\uffef\032\uffef\046\uffef\047\uffef\077" +
    "\uffef\106\uffef\001\002\000\004\103\147\001\002\000\004" +
    "\107\145\001\002\000\004\103\146\001\002\000\032\015" +
    "\uffee\016\uffee\017\uffee\022\uffee\026\uffee\030\uffee\031\uffee" +
    "\032\uffee\046\uffee\047\uffee\077\uffee\106\uffee\001\002\000" +
    "\032\015\uffea\016\uffea\017\uffea\022\uffea\026\uffea\030\uffea" +
    "\031\uffea\032\uffea\046\uffea\047\uffea\077\uffea\106\uffea\001" +
    "\002\000\006\103\151\105\152\001\002\000\032\015\uffed" +
    "\016\uffed\017\uffed\022\uffed\026\uffed\030\uffed\031\uffed\032" +
    "\uffed\046\uffed\047\uffed\077\uffed\106\uffed\001\002\000\004" +
    "\107\153\001\002\000\004\103\154\001\002\000\032\015" +
    "\uffec\016\uffec\017\uffec\022\uffec\026\uffec\030\uffec\031\uffec" +
    "\032\uffec\046\uffec\047\uffec\077\uffec\106\uffec\001\002\000" +
    "\006\014\156\106\160\001\002\000\006\014\163\106\160" +
    "\001\002\000\004\073\161\001\002\000\006\014\uffce\073" +
    "\uffce\001\002\000\004\103\162\001\002\000\032\015\uffd1" +
    "\016\uffd1\017\uffd1\022\uffd1\026\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\046\uffd1\047\uffd1\077\uffd1\106\uffd1\001\002\000\004" +
    "\073\174\001\002\000\004\014\165\001\002\000\006\073" +
    "\166\104\167\001\002\000\004\103\173\001\002\000\004" +
    "\106\170\001\002\000\004\073\171\001\002\000\004\103" +
    "\172\001\002\000\032\015\uffcf\016\uffcf\017\uffcf\022\uffcf" +
    "\026\uffcf\030\uffcf\031\uffcf\032\uffcf\046\uffcf\047\uffcf\077" +
    "\uffcf\106\uffcf\001\002\000\032\015\uffd0\016\uffd0\017\uffd0" +
    "\022\uffd0\026\uffd0\030\uffd0\031\uffd0\032\uffd0\046\uffd0\047" +
    "\uffd0\077\uffd0\106\uffd0\001\002\000\004\103\175\001\002" +
    "\000\032\015\uffd2\016\uffd2\017\uffd2\022\uffd2\026\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\046\uffd2\047\uffd2\077\uffd2\106\uffd2" +
    "\001\002\000\006\033\200\050\177\001\002\000\004\014" +
    "\207\001\002\000\004\014\201\001\002\000\006\014\202" +
    "\106\203\001\002\000\004\103\206\001\002\000\004\014" +
    "\204\001\002\000\004\103\205\001\002\000\032\015\uffe5" +
    "\016\uffe5\017\uffe5\022\uffe5\026\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\046\uffe5\047\uffe5\077\uffe5\106\uffe5\001\002\000\032" +
    "\015\uffe7\016\uffe7\017\uffe7\022\uffe7\026\uffe7\030\uffe7\031" +
    "\uffe7\032\uffe7\046\uffe7\047\uffe7\077\uffe7\106\uffe7\001\002" +
    "\000\006\014\210\106\211\001\002\000\004\103\214\001" +
    "\002\000\004\014\212\001\002\000\004\103\213\001\002" +
    "\000\032\015\uffe6\016\uffe6\017\uffe6\022\uffe6\026\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\046\uffe6\047\uffe6\077\uffe6\106\uffe6" +
    "\001\002\000\032\015\uffe8\016\uffe8\017\uffe8\022\uffe8\026" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\046\uffe8\047\uffe8\077\uffe8" +
    "\106\uffe8\001\002\000\006\071\057\106\060\001\002\000" +
    "\004\073\217\001\002\000\004\076\220\001\002\000\026" +
    "\015\017\016\024\017\030\022\014\026\021\031\020\032" +
    "\032\046\025\047\034\106\033\001\002\000\032\015\017" +
    "\016\024\017\030\022\014\026\021\030\121\031\020\032" +
    "\032\046\025\047\034\077\222\106\033\001\002\000\034" +
    "\015\uffe2\016\uffe2\017\uffe2\022\uffe2\026\uffe2\027\223\030" +
    "\uffe2\031\uffe2\032\uffe2\046\uffe2\047\uffe2\077\uffe2\106\uffe2" +
    "\001\002\000\004\076\224\001\002\000\026\015\017\016" +
    "\024\017\030\022\014\026\021\031\020\032\032\046\025" +
    "\047\034\106\033\001\002\000\032\015\017\016\024\017" +
    "\030\022\014\026\021\030\121\031\020\032\032\046\025" +
    "\047\034\077\226\106\033\001\002\000\032\015\uffdb\016" +
    "\uffdb\017\uffdb\022\uffdb\026\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\046\uffdb\047\uffdb\077\uffdb\106\uffdb\001\002\000\006\071" +
    "\057\106\060\001\002\000\004\073\231\001\002\000\004" +
    "\076\232\001\002\000\026\015\017\016\024\017\030\022" +
    "\014\026\021\031\020\032\032\046\025\047\034\106\033" +
    "\001\002\000\032\015\017\016\024\017\030\022\014\026" +
    "\021\030\121\031\020\032\032\046\025\047\034\077\234" +
    "\106\033\001\002\000\032\015\uffda\016\uffda\017\uffda\022" +
    "\uffda\026\uffda\030\uffda\031\uffda\032\uffda\046\uffda\047\uffda" +
    "\077\uffda\106\uffda\001\002\000\004\103\236\001\002\000" +
    "\032\015\uffe3\016\uffe3\017\uffe3\022\uffe3\026\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\046\uffe3\047\uffe3\077\uffe3\106\uffe3\001" +
    "\002\000\004\033\240\001\002\000\004\107\241\001\002" +
    "\000\004\105\242\001\002\000\004\107\243\001\002\000" +
    "\004\103\244\001\002\000\032\015\uffeb\016\uffeb\017\uffeb" +
    "\022\uffeb\026\uffeb\030\uffeb\031\uffeb\032\uffeb\046\uffeb\047" +
    "\uffeb\077\uffeb\106\uffeb\001\002\000\004\002\001\001\002" +
    "\000\004\073\247\001\002\000\004\076\250\001\002\000" +
    "\026\015\017\016\024\017\030\022\014\026\021\031\020" +
    "\032\032\046\025\047\034\106\033\001\002\000\032\015" +
    "\017\016\024\017\030\022\014\026\021\030\121\031\020" +
    "\032\032\046\025\047\034\077\252\106\033\001\002\000" +
    "\004\002\uffff\001\002\000\004\072\254\001\002\000\004" +
    "\073\255\001\002\000\004\076\256\001\002\000\026\015" +
    "\017\016\024\017\030\022\014\026\021\031\020\032\032" +
    "\046\025\047\034\106\033\001\002\000\032\015\017\016" +
    "\024\017\030\022\014\026\021\030\121\031\020\032\032" +
    "\046\025\047\034\077\260\106\033\001\002\000\004\002" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\030\004\022\006\026\007\025\010\014\012\015\013\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\112\006\113\007\116\010\111\011" +
    "\117\012\115\013\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\103\001" +
    "\001\000\002\001\001\000\004\005\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\110\004\022\006" +
    "\026\007\025\010\014\012\015\013\021\001\001\000\020" +
    "\004\112\006\113\007\116\010\111\011\117\012\115\013" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\123\004\022\006\026\007\025\010" +
    "\014\012\015\013\021\001\001\000\020\004\112\006\113" +
    "\007\116\010\111\011\117\012\115\013\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\156\001\001\000" +
    "\004\016\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\220" +
    "\004\022\006\026\007\025\010\014\012\015\013\021\001" +
    "\001\000\020\004\112\006\113\007\116\010\111\011\117" +
    "\012\115\013\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\224\004\022\006\026\007\025\010\014" +
    "\012\015\013\021\001\001\000\020\004\112\006\113\007" +
    "\116\010\111\011\117\012\115\013\121\001\001\000\002" +
    "\001\001\000\004\014\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\232\004\022\006\026\007\025" +
    "\010\014\012\015\013\021\001\001\000\020\004\112\006" +
    "\113\007\116\010\111\011\117\012\115\013\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\250" +
    "\004\022\006\026\007\025\010\014\012\015\013\021\001" +
    "\001\000\020\004\112\006\113\007\116\010\111\011\117" +
    "\012\115\013\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\256" +
    "\004\022\006\026\007\025\010\014\012\015\013\021\001" +
    "\001\000\020\004\112\006\113\007\116\010\111\011\117" +
    "\012\115\013\121\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_PRINTF ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PRINTF ::= Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Coma Identificador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PRINTF ::= Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PRINTF ::= Printf Parent_a SENTENCIA_PRINTF Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PRINTF ::= Printf Parent_a Comillas Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Return Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Sistema Parent_a Comillas Pause Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Int Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Void Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

