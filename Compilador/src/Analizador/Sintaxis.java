
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 16 16:12:33 COT 2021
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 16 16:12:33 COT 2021
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\011\004\000\002\012" +
    "\011\000\002\012\012\000\002\002\011\000\002\002\010" +
    "\000\002\002\011\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\004\006\000" +
    "\002\004\005\000\002\004\007\000\002\004\007\000\002" +
    "\004\011\000\002\004\011\000\002\004\006\000\002\004" +
    "\006\000\002\004\010\000\002\004\010\000\002\004\011" +
    "\000\002\004\011\000\002\004\011\000\002\004\005\000" +
    "\002\006\011\000\002\016\003\000\002\016\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\006\000\002" +
    "\016\007\000\002\016\006\000\002\016\007\000\002\016" +
    "\005\000\002\016\005\000\002\007\015\000\002\010\011" +
    "\000\002\013\013\000\002\015\011\000\002\017\012\000" +
    "\002\017\011\000\002\005\005\000\002\005\004\000\002" +
    "\005\004\000\002\014\010\000\002\014\007\000\002\014" +
    "\011\000\002\014\013\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\012\005\001\002\000\010\017\023\020" +
    "\020\102\021\001\002\000\004\054\010\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\106" +
    "\011\001\002\000\004\105\012\001\002\000\004\106\013" +
    "\001\002\000\004\053\014\001\002\000\006\012\005\061" +
    "\015\001\002\000\004\103\017\001\002\000\010\017\uffff" +
    "\020\uffff\102\uffff\001\002\000\010\017\ufffe\020\ufffe\102" +
    "\ufffe\001\002\000\004\102\313\001\002\000\004\072\306" +
    "\001\002\000\004\002\000\001\002\000\004\102\024\001" +
    "\002\000\004\072\025\001\002\000\004\073\026\001\002" +
    "\000\004\076\027\001\002\000\030\015\046\016\042\017" +
    "\037\022\032\026\045\030\047\031\052\032\030\046\050" +
    "\047\044\106\035\001\002\000\004\072\253\001\002\000" +
    "\032\015\ufff3\016\ufff3\017\ufff3\022\ufff3\026\ufff3\030\ufff3" +
    "\031\ufff3\032\ufff3\046\ufff3\047\ufff3\077\ufff3\106\ufff3\001" +
    "\002\000\004\106\245\001\002\000\032\015\046\016\042" +
    "\017\037\022\032\026\045\030\047\031\052\032\030\046" +
    "\050\047\044\077\244\106\035\001\002\000\032\015\ufff9" +
    "\016\ufff9\017\ufff9\022\ufff9\026\ufff9\030\ufff9\031\ufff9\032" +
    "\ufff9\046\ufff9\047\ufff9\077\ufff9\106\ufff9\001\002\000\004" +
    "\033\241\001\002\000\032\015\ufff7\016\ufff7\017\ufff7\022" +
    "\ufff7\026\ufff7\030\ufff7\031\ufff7\032\ufff7\046\ufff7\047\ufff7" +
    "\077\ufff7\106\ufff7\001\002\000\006\067\221\106\222\001" +
    "\002\000\032\015\uffed\016\uffed\017\uffed\022\uffed\026\uffed" +
    "\030\uffed\031\uffed\032\uffed\046\uffed\047\uffed\077\uffed\106" +
    "\uffed\001\002\000\032\015\ufff5\016\ufff5\017\ufff5\022\ufff5" +
    "\026\ufff5\030\ufff5\031\ufff5\032\ufff5\046\ufff5\047\ufff5\077" +
    "\ufff5\106\ufff5\001\002\000\004\106\202\001\002\000\032" +
    "\015\ufff1\016\ufff1\017\ufff1\022\ufff1\026\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\046\ufff1\047\ufff1\077\ufff1\106\ufff1\001\002" +
    "\000\004\072\174\001\002\000\004\072\162\001\002\000" +
    "\004\106\160\001\002\000\004\076\150\001\002\000\004" +
    "\072\127\001\002\000\032\015\uffef\016\uffef\017\uffef\022" +
    "\uffef\026\uffef\030\uffef\031\uffef\032\uffef\046\uffef\047\uffef" +
    "\077\uffef\106\uffef\001\002\000\004\072\053\001\002\000" +
    "\010\051\056\052\054\106\057\001\002\000\006\073\uffdc" +
    "\103\uffdc\001\002\000\004\073\114\001\002\000\006\073" +
    "\uffdd\103\uffdd\001\002\000\016\053\065\054\061\055\060" +
    "\056\062\057\063\060\064\001\002\000\012\014\107\051" +
    "\110\052\106\107\105\001\002\000\006\106\104\107\103" +
    "\001\002\000\012\014\075\051\077\052\076\107\074\001" +
    "\002\000\006\106\073\107\072\001\002\000\006\106\071" +
    "\107\070\001\002\000\006\106\067\107\066\001\002\000" +
    "\006\073\uffda\103\uffda\001\002\000\006\073\uffd9\103\uffd9" +
    "\001\002\000\006\073\uffd1\103\uffd1\001\002\000\006\073" +
    "\uffd0\103\uffd0\001\002\000\006\073\uffd3\103\uffd3\001\002" +
    "\000\006\073\uffd2\103\uffd2\001\002\000\006\073\uffca\103" +
    "\uffca\001\002\000\006\014\100\106\101\001\002\000\006" +
    "\073\uffd4\103\uffd4\001\002\000\006\073\uffd8\103\uffd8\001" +
    "\002\000\006\073\uffcd\103\uffcd\001\002\000\004\014\102" +
    "\001\002\000\006\073\uffcc\103\uffcc\001\002\000\006\073" +
    "\uffd7\103\uffd7\001\002\000\006\073\uffd6\103\uffd6\001\002" +
    "\000\006\073\uffcb\103\uffcb\001\002\000\006\073\uffd5\103" +
    "\uffd5\001\002\000\006\014\111\106\112\001\002\000\006" +
    "\073\uffdb\103\uffdb\001\002\000\006\073\uffcf\103\uffcf\001" +
    "\002\000\004\014\113\001\002\000\006\073\uffce\103\uffce" +
    "\001\002\000\004\076\115\001\002\000\030\015\046\016" +
    "\042\017\037\022\032\026\045\030\047\031\052\032\030" +
    "\046\050\047\044\106\035\001\002\000\032\015\046\016" +
    "\042\017\037\022\032\026\045\030\047\031\052\032\030" +
    "\046\050\047\044\077\122\106\035\001\002\000\032\015" +
    "\ufff4\016\ufff4\017\ufff4\022\ufff4\026\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\046\ufff4\047\ufff4\077\ufff4\106\ufff4\001\002\000" +
    "\032\015\ufffa\016\ufffa\017\ufffa\022\ufffa\026\ufffa\030\ufffa" +
    "\031\ufffa\032\ufffa\046\ufffa\047\ufffa\077\ufffa\106\ufffa\001" +
    "\002\000\032\015\ufff8\016\ufff8\017\ufff8\022\ufff8\026\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\046\ufff8\047\ufff8\077\ufff8\106" +
    "\ufff8\001\002\000\032\015\uffc8\016\uffc8\017\uffc8\022\uffc8" +
    "\026\uffc8\030\uffc8\031\uffc8\032\uffc8\046\uffc8\047\uffc8\077" +
    "\uffc8\106\uffc8\001\002\000\032\015\uffee\016\uffee\017\uffee" +
    "\022\uffee\026\uffee\030\uffee\031\uffee\032\uffee\046\uffee\047" +
    "\uffee\077\uffee\106\uffee\001\002\000\032\015\ufff6\016\ufff6" +
    "\017\ufff6\022\ufff6\026\ufff6\030\ufff6\031\ufff6\032\ufff6\046" +
    "\ufff6\047\ufff6\077\ufff6\106\ufff6\001\002\000\032\015\ufff2" +
    "\016\ufff2\017\ufff2\022\ufff2\026\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\046\ufff2\047\ufff2\077\ufff2\106\ufff2\001\002\000\032" +
    "\015\ufff0\016\ufff0\017\ufff0\022\ufff0\026\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\046\ufff0\047\ufff0\077\ufff0\106\ufff0\001\002" +
    "\000\006\014\130\106\132\001\002\000\006\014\135\106" +
    "\132\001\002\000\004\073\133\001\002\000\006\014\uffbc" +
    "\073\uffbc\001\002\000\004\103\134\001\002\000\032\015" +
    "\uffbf\016\uffbf\017\uffbf\022\uffbf\026\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\046\uffbf\047\uffbf\077\uffbf\106\uffbf\001\002\000" +
    "\004\073\146\001\002\000\004\014\137\001\002\000\006" +
    "\073\140\104\141\001\002\000\004\103\145\001\002\000" +
    "\004\106\142\001\002\000\004\073\143\001\002\000\004" +
    "\103\144\001\002\000\032\015\uffbd\016\uffbd\017\uffbd\022" +
    "\uffbd\026\uffbd\030\uffbd\031\uffbd\032\uffbd\046\uffbd\047\uffbd" +
    "\077\uffbd\106\uffbd\001\002\000\032\015\uffbe\016\uffbe\017" +
    "\uffbe\022\uffbe\026\uffbe\030\uffbe\031\uffbe\032\uffbe\046\uffbe" +
    "\047\uffbe\077\uffbe\106\uffbe\001\002\000\004\103\147\001" +
    "\002\000\032\015\uffc0\016\uffc0\017\uffc0\022\uffc0\026\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\046\uffc0\047\uffc0\077\uffc0\106" +
    "\uffc0\001\002\000\030\015\046\016\042\017\037\022\032" +
    "\026\045\030\047\031\052\032\030\046\050\047\044\106" +
    "\035\001\002\000\032\015\046\016\042\017\037\022\032" +
    "\026\045\030\047\031\052\032\030\046\050\047\044\077" +
    "\152\106\035\001\002\000\004\031\153\001\002\000\004" +
    "\072\154\001\002\000\010\051\056\052\054\106\057\001" +
    "\002\000\004\073\156\001\002\000\004\103\157\001\002" +
    "\000\032\015\uffc7\016\uffc7\017\uffc7\022\uffc7\026\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\046\uffc7\047\uffc7\077\uffc7\106\uffc7" +
    "\001\002\000\004\103\161\001\002\000\032\015\uffdf\016" +
    "\uffdf\017\uffdf\022\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\046\uffdf\047\uffdf\077\uffdf\106\uffdf\001\002\000\010\051" +
    "\056\052\054\106\057\001\002\000\004\073\164\001\002" +
    "\000\004\076\165\001\002\000\030\015\046\016\042\017" +
    "\037\022\032\026\045\030\047\031\052\032\030\046\050" +
    "\047\044\106\035\001\002\000\032\015\046\016\042\017" +
    "\037\022\032\026\045\030\047\031\052\032\030\046\050" +
    "\047\044\077\167\106\035\001\002\000\034\015\uffde\016" +
    "\uffde\017\uffde\022\uffde\026\uffde\027\170\030\uffde\031\uffde" +
    "\032\uffde\046\uffde\047\uffde\077\uffde\106\uffde\001\002\000" +
    "\004\076\171\001\002\000\030\015\046\016\042\017\037" +
    "\022\032\026\045\030\047\031\052\032\030\046\050\047" +
    "\044\106\035\001\002\000\032\015\046\016\042\017\037" +
    "\022\032\026\045\030\047\031\052\032\030\046\050\047" +
    "\044\077\173\106\035\001\002\000\032\015\uffc9\016\uffc9" +
    "\017\uffc9\022\uffc9\026\uffc9\030\uffc9\031\uffc9\032\uffc9\046" +
    "\uffc9\047\uffc9\077\uffc9\106\uffc9\001\002\000\004\014\175" +
    "\001\002\000\004\013\176\001\002\000\004\014\177\001" +
    "\002\000\004\073\200\001\002\000\004\103\201\001\002" +
    "\000\032\015\uffe0\016\uffe0\017\uffe0\022\uffe0\026\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\046\uffe0\047\uffe0\077\uffe0\106\uffe0" +
    "\001\002\000\006\033\204\050\203\001\002\000\004\014" +
    "\213\001\002\000\004\014\205\001\002\000\006\014\206" +
    "\106\207\001\002\000\004\103\212\001\002\000\004\014" +
    "\210\001\002\000\004\103\211\001\002\000\032\015\uffe1" +
    "\016\uffe1\017\uffe1\022\uffe1\026\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\046\uffe1\047\uffe1\077\uffe1\106\uffe1\001\002\000\032" +
    "\015\uffe3\016\uffe3\017\uffe3\022\uffe3\026\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\046\uffe3\047\uffe3\077\uffe3\106\uffe3\001\002" +
    "\000\006\014\214\106\215\001\002\000\004\103\220\001" +
    "\002\000\004\014\216\001\002\000\004\103\217\001\002" +
    "\000\032\015\uffe2\016\uffe2\017\uffe2\022\uffe2\026\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\046\uffe2\047\uffe2\077\uffe2\106\uffe2" +
    "\001\002\000\032\015\uffe4\016\uffe4\017\uffe4\022\uffe4\026" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\046\uffe4\047\uffe4\077\uffe4" +
    "\106\uffe4\001\002\000\004\106\237\001\002\000\012\033" +
    "\226\050\223\067\225\103\224\001\002\000\004\107\232" +
    "\001\002\000\032\015\uffeb\016\uffeb\017\uffeb\022\uffeb\026" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\046\uffeb\047\uffeb\077\uffeb" +
    "\106\uffeb\001\002\000\004\103\231\001\002\000\004\107" +
    "\227\001\002\000\004\103\230\001\002\000\032\015\uffea" +
    "\016\uffea\017\uffea\022\uffea\026\uffea\030\uffea\031\uffea\032" +
    "\uffea\046\uffea\047\uffea\077\uffea\106\uffea\001\002\000\032" +
    "\015\uffe6\016\uffe6\017\uffe6\022\uffe6\026\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\046\uffe6\047\uffe6\077\uffe6\106\uffe6\001\002" +
    "\000\006\103\233\105\234\001\002\000\032\015\uffe9\016" +
    "\uffe9\017\uffe9\022\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\046\uffe9\047\uffe9\077\uffe9\106\uffe9\001\002\000\004\107" +
    "\235\001\002\000\004\103\236\001\002\000\032\015\uffe8" +
    "\016\uffe8\017\uffe8\022\uffe8\026\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\046\uffe8\047\uffe8\077\uffe8\106\uffe8\001\002\000\004" +
    "\103\240\001\002\000\032\015\uffe5\016\uffe5\017\uffe5\022" +
    "\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\046\uffe5\047\uffe5" +
    "\077\uffe5\106\uffe5\001\002\000\004\107\242\001\002\000" +
    "\004\103\243\001\002\000\032\015\uffec\016\uffec\017\uffec" +
    "\022\uffec\026\uffec\030\uffec\031\uffec\032\uffec\046\uffec\047" +
    "\uffec\077\uffec\106\uffec\001\002\000\004\002\ufffd\001\002" +
    "\000\004\033\246\001\002\000\004\107\247\001\002\000" +
    "\004\105\250\001\002\000\004\107\251\001\002\000\004" +
    "\103\252\001\002\000\032\015\uffe7\016\uffe7\017\uffe7\022" +
    "\uffe7\026\uffe7\030\uffe7\031\uffe7\032\uffe7\046\uffe7\047\uffe7" +
    "\077\uffe7\106\uffe7\001\002\000\006\017\256\106\255\001" +
    "\002\000\004\073\302\001\002\000\004\033\274\001\002" +
    "\000\004\106\257\001\002\000\004\033\260\001\002\000" +
    "\004\107\261\001\002\000\004\103\262\001\002\000\010" +
    "\051\056\052\054\106\057\001\002\000\004\103\264\001" +
    "\002\000\006\067\266\106\267\001\002\000\004\073\uffc5" +
    "\001\002\000\004\106\273\001\002\000\006\050\270\067" +
    "\271\001\002\000\004\107\272\001\002\000\004\073\uffc2" +
    "\001\002\000\004\073\uffc3\001\002\000\004\073\uffc1\001" +
    "\002\000\004\107\275\001\002\000\004\103\276\001\002" +
    "\000\010\051\056\052\054\106\057\001\002\000\004\103" +
    "\300\001\002\000\006\067\266\106\267\001\002\000\004" +
    "\073\uffc4\001\002\000\004\076\303\001\002\000\030\015" +
    "\046\016\042\017\037\022\032\026\045\030\047\031\052" +
    "\032\030\046\050\047\044\106\035\001\002\000\032\015" +
    "\046\016\042\017\037\022\032\026\045\030\047\031\052" +
    "\032\030\046\050\047\044\077\305\106\035\001\002\000" +
    "\032\015\uffc6\016\uffc6\017\uffc6\022\uffc6\026\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\046\uffc6\047\uffc6\077\uffc6\106\uffc6\001" +
    "\002\000\004\073\307\001\002\000\004\076\310\001\002" +
    "\000\030\015\046\016\042\017\037\022\032\026\045\030" +
    "\047\031\052\032\030\046\050\047\044\106\035\001\002" +
    "\000\032\015\046\016\042\017\037\022\032\026\045\030" +
    "\047\031\052\032\030\046\050\047\044\077\312\106\035" +
    "\001\002\000\004\002\ufffc\001\002\000\004\072\314\001" +
    "\002\000\004\073\315\001\002\000\004\076\316\001\002" +
    "\000\030\015\046\016\042\017\037\022\032\026\045\030" +
    "\047\031\052\032\030\046\050\047\044\106\035\001\002" +
    "\000\032\015\046\016\042\017\037\022\032\026\045\030" +
    "\047\031\052\032\030\046\050\047\044\077\320\106\035" +
    "\001\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\006\011\005\012\003\001\001\000\004\002" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\032\004\033\006\035\007\040\010\030\013\042" +
    "\014\037\015\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\117\006\120\007\123" +
    "\010\116\013\124\014\122\015\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\115\004\033\006\035\007\040\010\030\013" +
    "\042\014\037\015\050\001\001\000\020\004\117\006\120" +
    "\007\123\010\116\013\124\014\122\015\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\130\001\001\000\004" +
    "\020\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\150\004\033\006\035\007\040\010\030\013\042" +
    "\014\037\015\050\001\001\000\020\004\117\006\120\007" +
    "\123\010\116\013\124\014\122\015\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\165\004\033" +
    "\006\035\007\040\010\030\013\042\014\037\015\050\001" +
    "\001\000\020\004\117\006\120\007\123\010\116\013\124" +
    "\014\122\015\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\171\004\033\006\035\007\040\010\030" +
    "\013\042\014\037\015\050\001\001\000\020\004\117\006" +
    "\120\007\123\010\116\013\124\014\122\015\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\262\001\001\000\002\001\001\000\004" +
    "\005\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\276\001\001\000\002\001\001\000\004" +
    "\005\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\303\004\033\006\035\007\040\010\030\013\042" +
    "\014\037\015\050\001\001\000\020\004\117\006\120\007" +
    "\123\010\116\013\124\014\122\015\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\310\004\033\006\035\007\040\010\030\013\042\014\037" +
    "\015\050\001\001\000\020\004\117\006\120\007\123\010" +
    "\116\013\124\014\122\015\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\316\004\033\006\035\007\040\010\030\013\042" +
    "\014\037\015\050\001\001\000\020\004\117\006\120\007" +
    "\123\010\116\013\124\014\122\015\125\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_PRINTF ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PRINTF ::= Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Coma Identificador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PRINTF ::= Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PRINTF ::= Printf Parent_a SENTENCIA_PRINTF Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PRINTF ::= Printf Parent_a Comillas Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA ::= Identificador Diferente Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_BOOLEANA ::= Identificador Igual_a Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_BOOLEANA ::= Identificador Diferente Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_BOOLEANA ::= Identificador Diferente Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_BOOLEANA ::= Identificador Igual_a Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_BOOLEANA ::= Identificador Igual_a Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_BOOLEANA ::= Identificador Menor_Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_BOOLEANA ::= Identificador Menor_Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= Identificador Mayor_Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Identificador Mayor_Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= Identificador Diferente False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Identificador Igual_a False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Identificador Menorque Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Menorque Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Identificador Diferente True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= Identificador Mayorque Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Identificador Mayorque Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Identificador Igual_a True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_BOOLEANA ::= True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Return Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Sistema Parent_a Comillas Pause Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Int Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Void Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INCLUDE ::= Include Menorque Identificador Punto Identificador Mayorque Using P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INCLUDE ::= Include Menorque Identificador Punto Identificador Mayorque INCLUDE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= INCLUDE INICIO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PROGRAMA",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

