package Analizador;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Linea, Op_asig_suma, Op_asig_multiplicacion, Op_asig_modulo, Op_asig_division, Op_asig_resta, Include, Pause, Comillas, Return, Cadena, Int, Void, Double, Float, Long, Char, Byte, If, Else, Do, While, For, 
    Igual, Suma, Resta, Define, Struct, Register, Union, Multiplicacion, Division, Op_logico, Op_relacional, Printf, Sistema, 
    Op_atribucion, True, False, Mayorque, Menorque, Igual_a, Diferente, Mayor_Igual, Menor_Igual, Using, Scanf, Cin, Cout, Switch, Case, Op_incremento, Op_decremento, Op_booleano, Parent_a, Parent_c,
    Desplazamiento_Izq, Desplazamiento_Der, Llave_a, Llave_c, Corchete_a, Corchete_c, Main, P_coma, Coma, Punto, Identificador,
    Numero, Break, Default, Dos_puntos, Comilla_Simple, Op_And, Op_Or, Op_Not, Op_And_BaB, Op_Or_BaB, Op_Not_BaB, Op_Xor_BaB, ERROR;
non terminal INICIO, CASE, DEFAULT, SWITCH, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, PROGRAMA, INCLUDE, DO_WHILE, PRINTF, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, SENTENCIA_PRINTF;

start with PROGRAMA;

PROGRAMA ::=
    INCLUDE INICIO
    
;
INCLUDE ::=
     Include Menorque Identificador Punto Identificador Mayorque INCLUDE |
     Include Menorque Identificador Punto Identificador Mayorque Using P_coma |
     Include Menorque Identificador Mayorque INCLUDE |
     Include Menorque Identificador Mayorque Using P_coma
     
;
INICIO ::= 
    
    Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    Void Main Parent_a Parent_c Llave_a SENTENCIA Llave_c
;


SENTENCIA ::=     
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE |
    DO_WHILE |
    SENTENCIA FOR |
    FOR |
    SENTENCIA SWITCH |
    SWITCH |
    SENTENCIA PRINTF |
    PRINTF
;


DECLARACION ::=   
    Cin Desplazamiento_Der Identificador P_coma| 
    Identificador Igual Numero P_coma |

    Char Identificador P_coma |
    
    Int Identificador P_coma |
    Int Identificador Igual Numero P_coma |
    Int Identificador Op_atribucion Numero P_coma |
    Int Identificador Op_atribucion Numero Punto Numero P_coma |
    Float Identificador Igual Numero Punto Numero P_coma |
    Int Identificador Op_incremento P_coma | 
    Int Op_incremento Identificador P_coma | 


    Cadena Identificador Op_atribucion Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma |
    Sistema Parent_a Comillas Pause Comillas Parent_c P_coma |
    Return Identificador P_coma
;
IF ::=
    If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_BOOLEANA ::= 
    True |
    False |
    
    Identificador Igual_a True |
    Identificador Mayorque Numero |
    Identificador Mayorque Identificador |

    Identificador Diferente True |
    Identificador Menorque Numero |
    Identificador Menorque Identificador |

    Identificador Igual_a False |
    Identificador Diferente False |

    Identificador Mayor_Igual Numero |
    Identificador Mayor_Igual Identificador |

    Identificador Menor_Igual Numero |
    Identificador Menor_Igual Identificador |

    Identificador Igual_a Comillas Comillas |
    Identificador Igual_a Comillas Identificador Comillas |
    Identificador Diferente Comillas Comillas |
    Identificador Diferente Comillas Identificador Comillas |

    Identificador Igual_a Numero |
    Identificador Diferente Numero 
;

IF_ELSE ::= 
    If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;

WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c
;

DO_WHILE ::= 
    Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma
;
FOR ::= 
    For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c
;

SWITCH ::=
    Switch Parent_a Identificador Parent_c Llave_a CASE Llave_c
;

CASE ::=
    Case Comilla_Simple Identificador Comilla_Simple Dos_puntos Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Parent_c P_coma Break P_coma CASE |
    Case Comilla_Simple Identificador Comilla_Simple Dos_puntos Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Parent_c P_coma Break P_coma DEFAULT
;

DEFAULT ::=
    Default Dos_puntos Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Parent_c P_coma
;


SENTENCIA_FOR ::=
    Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;

DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;

PRINTF ::=
    Printf Parent_a Comillas Comillas Parent_c P_coma |
    Printf Parent_a SENTENCIA_PRINTF Parent_c P_coma |
    Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Parent_c P_coma |
    Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Coma Identificador Parent_c P_coma   
;

SENTENCIA_PRINTF ::=
    Identificador
    

   
;
